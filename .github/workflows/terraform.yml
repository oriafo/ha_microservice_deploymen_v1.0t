name: Terraform Infrastructure Provisioning

on:
  pull_request:
    branches:
      - main            # Trigger a workflow that target the main branch
      - staging  
      - '!dev'
      - '!feature/*'
      # - 'releases/**'


# fix: added credential for multiple environment and this credentials are selected based on the github.ref
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read 

jobs:
  Infra_provisioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Configure AWS Credentials for Development Environment
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{github.ref}} == 'refs/heads/dev'
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
            aws-region: us-east-1
            role-to-assume: arn:aws:iam::681117582889:role/GitActionPermissionPolicy
        
      
      - name: Configure AWS Credentials for staging Environment
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{github.ref}} == 'refs/heads/staging'
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
            aws-region: us-east-1
            role-to-assume: arn:aws:iam::681117582889:role/GitActionPermissionPolicy
                         
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.8 # Specify the version you need

      - name: Running some .tf script
        run: |
          cd infra
          terraform init
          terraform fmt
          terraform validate
          terraform plan -var "aws_public_key=${{ secrets.AWS_PUBLIC_KEY }}" -var "aws_private_key=${{ secrets.AWS_PRIVATE_KEY }}" -out=tfplan

      # - name: Initialize Terraform
      #   run: terraform init


      # - name: Validate Terraform
      #   run: terraform validate

      # - name: Plan Terraform

      #   id: plan
      #   run: terraform -chdir=infra plan -out=tfplan
      #   # run: terraform plan


      - name: Apply Terraform
        run: |
          terraform apply tfplan -var "aws_public_key=${{ secrets.AWS_PUBLIC_KEY }}" -var "aws_private_key=${{ secrets.AWS_PRIVATE_KEY }}" --auto-approve
        # continue-on-error: true  # Continue even if apply fails for status check

      - name: Check Terraform Status
        run: |
          if [ $? -ne 0 ]; then
            echo "Terraform apply failed"
            exit 1
          else
            echo "Terraform apply succeeded"
          fi
